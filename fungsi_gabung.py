# -*- coding: utf-8 -*-
"""fungsi gabung

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rjf3jFtRXx8wjLtuq7uKLfm996Zckhrh
"""

"""
!pip install -r https://raw.githubusercontent.com/ultralytics/yolov5/master/requirements.txt

!pip install dill
"""

# deteksi objek dengan input frame, hasil processing disimpan ke folder baru

import os
import cv2
import torch
import matplotlib.pyplot as plt

def detect_objects_from_folder(model_path, folder_path, object_labels, fps):
    # Load frames from the folder in one line
    frames = [cv2.imread(os.path.join(folder_path, filename)) for filename in sorted(os.listdir(folder_path)) if filename.endswith(('.png', '.jpg', '.jpeg'))]

    # Load YOLOv5 model
    model = torch.hub.load('ultralytics/yolov5', 'custom', path=model_path, force_reload=True)

    # Variables to track detected object and its duration
    detected_object = None
    start_time = None
    total_duration = {label: 0 for label in object_labels}

    processed_frames = []

    # Process each frame
    for frame_count, frame in enumerate(frames):
        # Perform object detection on the frame
        results = model(frame)

        # Flags to indicate if any object is detected in the current frame
        object_detected = {label: False for label in object_labels}

        # Draw bounding boxes on the frame
        for detection in results.xyxy[0]:
            x1, y1, x2, y2, confidence, class_idx = detection
            label = model.names[int(class_idx)]

            # Check if the label is in the object_labels list
            if label in object_labels:
                # Convert coordinates to integers
                x1, y1, x2, y2 = int(x1), int(y1), int(x2), int(y2)

                # Draw bounding box
                cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)

                # Add label and confidence score
                text = f'{label}: {confidence:.2f}'
                cv2.putText(frame, text, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

                # Track detected objects
                object_detected[label] = True

        # Update detected objects and their durations
        for label in object_labels:
            if object_detected[label]:
                if detected_object != label:
                    detected_object = label
                    start_time = frame_count  # Use frame count instead of timestamp for simplicity
            else:
                if detected_object == label:
                    end_time = frame_count
                    duration = end_time - start_time
                    total_duration[label] += duration
                    print(f'{label} detected for {duration} frames')
                    detected_object = None

        # Append processed frame to list
        processed_frames.append(frame)

    # Convert frame duration to seconds
    total_duration_seconds = {label: duration / fps for label, duration in total_duration.items()}

    # Print total duration of the detected objects in seconds
    for label, duration in total_duration_seconds.items():
        print(f'Total duration of {label}: {duration:.2f} seconds')

    # Save processed frames to folder
    processed_frames_dir = '/content/processed_framesfixbgtplis'
    if not os.path.exists(processed_frames_dir):
        os.makedirs(processed_frames_dir)

    for i, frame in enumerate(processed_frames):
        cv2.imwrite(f'{processed_frames_dir}/frame_{i:04d}.jpg', frame)

    # Release the OpenCV window
    cv2.destroyAllWindows()

    return processed_frames, total_duration_seconds


# contoh pemakaiab
model_path = '/content/weightsbest (1).pt'  # Path ke model
folder_path = '/content/frames'  # Path ke folder berisi frames
object_labels = ['bottle', 'cigarette', 'phone', 'smoke', 'vape']  # Object labels to detect
fps = 30  # Frame rate dari video

processed_frames, durations = detect_objects_from_folder(model_path, folder_path, object_labels, fps)

print('Durations for each object:')
for label, duration in durations.items():
    print(f'{label}: {duration:.2f} seconds')
